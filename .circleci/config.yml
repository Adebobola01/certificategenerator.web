version: 2.1
# orbs:
#  node: circleci/node@5.0.2

jobs:
  build-frontend:
#    executor: node/default
    docker:
      - image: circleci/node:16.10.0
#       - image: docker:17.09.1-ce-git
    steps:
      - checkout # pulls code from github repo
#      - setup_remote_docker
#       - run:
#           name: cd & update
#           command: |
#             cd frontend
#             sudo npm install -g
      - restore_cache:
          key: dependency-cache-{{ checksum "./frontend/package.json" }}
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            CI=false npm run build
      - save_cache:
          key: dependency-cache-{{ checksum "./frontend/package.json" }}
          paths:
            - ./frontend/node_modules
#       - run:
#           name: Docker
#           when: on_success
#           command: |
#             cd frontend
#             docker --version
#             docker login -u=$DOCKER_LOGIN -p=$DOCKER_PASSWORD
#             docker build -t codak77/certificategeneratorwebfrontend:frontend --build-arg codak77=codak77/certificategeneratorwebfrontend-frontend .
#             docker push codak77/certificategeneratorwebfrontend:frontend
#             echo "Docker build made sucessfully!! for codak77/certificategeneratorwebfrontend:frontend"
#       - run:
#           name: Build Failure
#           when: on_fail
#           command: |
#             echo "ERROR building certificategeneratorwebfrontend:frontend"

  build-backend:
#    executor: node/default
    docker:
      - image: circleci/node:16.10.0
#       - image: docker:17.09.1-ce-git
    steps:
      - checkout # pulls code from github repo
#     - setup_remote_docker
      - run:
          name: update packages
          command: |
            cd backend
            sudo npm install -g
      - restore_cache:
            key: dependency-cache-{{ checksum "./backend/package.json" }}
      - run:
          name: Node Install
          command: |
            cd backend
            npm cache clear --force
            sudo npm install
      - save_cache:
          key: dependency-cache-{{ checksum "./backend/package.json" }}
          paths:
            - ./backend/node_modules
#       - run:
#           name: Run Endpoint tests
#           command: |
#               cd backend
#               npm test
#       - run:
#           name: Docker
#           when: on_success
#           command: |
#             cd backend
#             docker --version
#             docker login -u=$DOCKER_LOGIN -p=$DOCKER_PASSWORD
#             docker build -t codak77/certificategeneratorwebbackend:backend --build-arg codak77=certificategeneratorwebbackend-backend .
#             docker push codak77/certificategeneratorwebbackend:backend
#             echo "Docker build made sucessfully!! for certificategeneratorwebbackend:backend"
#       - run:
#           name: Build Failure
#           when: on_fail
#           command: |
#             echo "ERROR building certificategeneratorwebbackend:backend"

  continous-deployment:
#     docker:
#       - image: circleci/node:10.19.0-buster
    machine:
      enabled: true
    steps:
      - checkout
#      - setup_remote_docker 
      - add_ssh_keys:
          fingerprints:
            #- "03:84:c3:2d:95:60:2d:b8:80:d2:cb:50:3c:3c:40:66"
            - "2f:fa:05:70:f5:b0:dd:75:c0:4c:6f:bb:32:da:5a:cd"
      - run:
#          when: on_success
          name: Deploy success
          command: |
            ssh -o "StrictHostKeyChecking no" root@65.108.237.42 "\
            sudo su sean && whoami
            cd && ls
            git clone https://github.com/workshopapps/certificategenerator.web.git
            cd certificategenerator.web
            git checkout staging && git status && git pull
            cd frontend && npm i --force && npm run build
            sudo cp -fr build/* /var/www/certgo.hng.tech/html2
            cd ..
            cd backend && npm i --force
            cp -rf * /home/sean/certgo-staging/backend
            pm2 stop certgo-staging
            pm2 start /home/sean/certgo-staging/backend/ecosystem.config.js
            sudo pm2 save 
            cd ../..
            rm -rf certificategenerator.web && exit"
              
#             ssh -o "StrictHostKeyChecking no" ubuntu@ec2-34-195-230-138.compute-1.amazonaws.com "\
#             sudo su
#             cd /home/ubuntu
#             sudo docker login
#             sudo docker stop frontend backend
#             sudo docker rm frontend backend
#             sudo docker rmi -f codak77/certificategeneratorwebbackend:backend codak77/certificategeneratorwebfrontend:frontend
#             sudo docker pull codak77/certificategeneratorwebfrontend:frontend
#             sudo docker pull codak77/certificategeneratorwebbackend:backend
#             sudo docker run -d -p 3000:3000 --name frontend codak77/certificategeneratorwebfrontend:frontend
#             sudo docker run -d -p 5000:5000 --name backend codak77/certificategeneratorwebbackend:backend
#             sudo docker builder prune -af
#             sudo docker system prune -af && exit"
#       - run:
#           name: Deploy Failure
#           when: on_fail
#           command: |
#             echo "ERROR auto-deploying Docker Images"

workflows:
  default:
    jobs:
      - build-frontend:
          filters:
            branches:
              only:
                - staging
      - build-backend:
          filters:
            branches:
              only:
                - staging
      - continous-deployment:
          requires:
            - build-frontend
            - build-backend
          filters:
            branches:
              only:
                - staging
